/*
 * Name: Alec Farfan, Jiwon Yoo, Luis Pena, Wenbo Yang
 * Date: 03/20/15
 * Purpose: Chess UI
 */

package Chess.Game;

// Import libraries
import Chess.AI.Game_Tree;
import Chess.Serializable.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import javax.swing.*;
import javax.swing.border.Border;
import java.util.ArrayList;
import java.awt.BorderLayout;
import Chess.GamePiece.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author rcc
 */
public class PlayInterface extends JFrame implements ActionListener {
    private static GameStateSerializable record = new GameStateSerializable();
    private static GameThread thread;
    private int[] p1_game_piece = {8,2,2,2,1}; 
    private int[] p2_game_piece = {8,2,2,2,1};
    // Temp test variables
    JPanel placeHolder;
    GameState game;
    static int game_choice;
    
    public static Player_Info player1;
    public static Player_Info player2;
    
    //Mysql variables 
  
    Connection connect = null;
    PreparedStatement  states  = null;
    ResultSet  results = null;
    
    
    public PlayInterface(Player_Info player1, Player_Info player2,int game_choice) {
        game = new GameState();
        this.game_choice = game_choice;
        thread = new GameThread(this);
        thread.start();
        this.player1 = player1;
        this.player2 = player2;
        
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chessBoard = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jSeparator4 = new javax.swing.JSeparator();
        turnsLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pawnLabel2 = new javax.swing.JLabel();
        kingLabel2 = new javax.swing.JLabel();
        knightLabel2 = new javax.swing.JLabel();
        rookLabel2 = new javax.swing.JLabel();
        bishopLabel2 = new javax.swing.JLabel();
        queenLabel2 = new javax.swing.JLabel();
        pawnLabel = new javax.swing.JLabel();
        knightLabel = new javax.swing.JLabel();
        rookLabel = new javax.swing.JLabel();
        bishopLabel = new javax.swing.JLabel();
        queenLabel = new javax.swing.JLabel();
        kingLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newGameMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        saveMenu = new javax.swing.JMenuItem();
        saveAsMenu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        LoadMenu = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        exitMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(950, 590));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        chessBoard.setBackground(new java.awt.Color(0, 0, 0));
        chessBoard.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        chessBoard.setPreferredSize(new java.awt.Dimension(400, 400));

        javax.swing.GroupLayout chessBoardLayout = new javax.swing.GroupLayout(chessBoard);
        chessBoard.setLayout(chessBoardLayout);
        chessBoardLayout.setHorizontalGroup(
            chessBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
        );
        chessBoardLayout.setVerticalGroup(
            chessBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(588, 120));
        jPanel1.setLayout(null);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Player ID");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(30, 60, 180, 20);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Player 1 Select a Game Piece");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(30, 20, 340, 30);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Chess/img/chesstext.png"))); // NOI18N
        jPanel1.add(jLabel2);
        jLabel2.setBounds(0, 0, 600, 120);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(246, 0));
        jPanel2.setLayout(null);
        jPanel2.add(jSeparator4);
        jSeparator4.setBounds(20, 220, 210, 10);

        turnsLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        turnsLabel.setForeground(new java.awt.Color(255, 255, 255));
        turnsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        turnsLabel.setText("Turns :     0");
        turnsLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(turnsLabel);
        turnsLabel.setBounds(30, 30, 190, 50);

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Player 1 :");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(40, 90, 70, 14);

        pawnLabel2.setForeground(new java.awt.Color(255, 255, 255));
        pawnLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pawnLabel2.setText("Pawn  :  8");
        pawnLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(pawnLabel2);
        pawnLabel2.setBounds(90, 250, 110, 20);

        kingLabel2.setForeground(new java.awt.Color(255, 255, 255));
        kingLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        kingLabel2.setText("King    :  Alive");
        kingLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(kingLabel2);
        kingLabel2.setBounds(120, 350, 140, 20);

        knightLabel2.setForeground(new java.awt.Color(255, 255, 255));
        knightLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        knightLabel2.setText("Knight :  2");
        knightLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(knightLabel2);
        knightLabel2.setBounds(90, 270, 110, 20);

        rookLabel2.setForeground(new java.awt.Color(255, 255, 255));
        rookLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rookLabel2.setText("Rook   :  2");
        rookLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(rookLabel2);
        rookLabel2.setBounds(90, 290, 110, 20);

        bishopLabel2.setForeground(new java.awt.Color(255, 255, 255));
        bishopLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bishopLabel2.setText("Bishop :  2");
        bishopLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(bishopLabel2);
        bishopLabel2.setBounds(90, 310, 110, 20);

        queenLabel2.setForeground(new java.awt.Color(255, 255, 255));
        queenLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        queenLabel2.setText("Queen :  1");
        queenLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(queenLabel2);
        queenLabel2.setBounds(90, 330, 110, 20);

        pawnLabel.setForeground(new java.awt.Color(255, 255, 255));
        pawnLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pawnLabel.setText("Pawn  :  8");
        pawnLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(pawnLabel);
        pawnLabel.setBounds(90, 90, 110, 20);

        knightLabel.setForeground(new java.awt.Color(255, 255, 255));
        knightLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        knightLabel.setText("Knight :  2");
        knightLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(knightLabel);
        knightLabel.setBounds(90, 110, 110, 20);

        rookLabel.setForeground(new java.awt.Color(255, 255, 255));
        rookLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rookLabel.setText("Rook   :  2");
        rookLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(rookLabel);
        rookLabel.setBounds(90, 130, 110, 20);

        bishopLabel.setForeground(new java.awt.Color(255, 255, 255));
        bishopLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bishopLabel.setText("Bishop :  2");
        bishopLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(bishopLabel);
        bishopLabel.setBounds(90, 150, 110, 20);

        queenLabel.setForeground(new java.awt.Color(255, 255, 255));
        queenLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        queenLabel.setText("Queen :  1");
        queenLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(queenLabel);
        queenLabel.setBounds(90, 170, 110, 20);

        kingLabel.setForeground(new java.awt.Color(255, 255, 255));
        kingLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        kingLabel.setText("King    : Alive");
        kingLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel2.add(kingLabel);
        kingLabel.setBounds(120, 190, 120, 20);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Player 2 :");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(40, 250, 70, 14);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Chess/img/chesstext2.png"))); // NOI18N
        jPanel2.add(jLabel3);
        jLabel3.setBounds(0, 0, 250, 406);

        chessBoard = new javax.swing.JPanel(new GridBagLayout());
        placeHolder = new javax.swing.JPanel(new GridBagLayout());
        placeHolder.setPreferredSize(new java.awt.Dimension(400,400));
        placeHolder = makeBoard();
        chessBoard.add(placeHolder);
        add(chessBoard);

        fileMenu.setText("File");

        newGameMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newGameMenu.setText("New Game...");
        fileMenu.add(newGameMenu);
        fileMenu.add(jSeparator1);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setText("Save...");
        fileMenu.add(saveMenu);

        saveAsMenu.setText("Save As...");
        saveAsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenu);
        fileMenu.add(jSeparator2);

        LoadMenu.setText("Load...");
        LoadMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadMenuActionPerformed(evt);
            }
        });
        fileMenu.add(LoadMenu);
        fileMenu.add(jSeparator3);

        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        jMenuBar1.add(fileMenu);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chessBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chessBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadMenuActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int result = fileChooser.showOpenDialog( this );
    }//GEN-LAST:event_LoadMenuActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuActionPerformed

    private void saveAsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");   

        int userSelection = fileChooser.showSaveDialog( this );

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            System.out.println("Save as file: " + fileToSave.getAbsolutePath());
        }
    }//GEN-LAST:event_saveAsMenuActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // save the gamestate
        GameStateSerializable record = new GameStateSerializable();
        CreateDataFile data = new CreateDataFile();
        
        record.setTurns( game.get_turns() );
        record.setPlayer_turn( game.get_player_turn() );
        record.setSelect_index( game.get_select_index() );
        record.setMove_index( game.get_move_index() );
        record.setChosen_piece( game.get_chosen_piece() );
        record.setPrevious_piece( game.get_previous_piece() );
        //record.setArray_board();
        
        data.openFile(record);
        data.addRecords(record);
        data.closeFile();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PlayInterface new_game = new PlayInterface(player1, player2,0);
                new_game.setVisible(true);
            }
        });
    }
    
    @Override
     public void actionPerformed(ActionEvent e){
    /***************************************************************************
    * This method is an overrided version of the actionPerformed method
    * inherited from the ActionListener abstract base class.
    **************************************************************************/
        
        switch(game_choice){
            
            case 0:{
                // Get the action command of the object triggering the action event
            String action = e.getActionCommand();
            Color piece_color;
            ArrayList<ArrayList<Integer>> legal_moves = new ArrayList();
            legal_moves.add(new ArrayList());
            legal_moves.add(new ArrayList());

            // Run through the array looking for the button that was clicked
            for(int i=0;i<64;i++){
                if(Integer.toString(i).equals(action)){
                int turn;
                if(game.get_player_turn()==false){
                    turn = 1;
                }
                else{
                    turn = 2;
                }

                jLabel1.setText(turn==1?player1.get_username():
                        player2.get_username() + " " + turn + " Select a Game Piece");
                if(game.get_chosen_piece()==null){
                    boolean found = true;
                    JButton chosen = game.get_array_index(i);

                    if(turn==1){
                        piece_color = Color.WHITE;
                        if(chosen.getForeground()!=Color.WHITE){
                            jLabel1.setText("Illegal Selection, Player 1 select a white piece");
                            found = false;
                        } 
                    }
                    else{
                        piece_color = Color.BLACK;
                        if(chosen.getForeground()!=Color.BLACK){
                            jLabel1.setText("Illegal Selection, Player 2 must select a black piece");
                            found = false;
                        } 
                    }

                    if(found==true){
                        game.set_chosen_piece(chosen);
                        game.set_select_index(i); 
                        Object o = e.getSource();
                        JButton b = null;
                        String buttonText = "";

                        if(o instanceof JButton)
                            b = (JButton)o;

                        if(b != null)
                            buttonText = b.getText();

                        switch(buttonText){
                            case "\u2659":
                                Pawn new_pawn = new Pawn(buttonText,piece_color,game,i);
                                legal_moves = new_pawn.get_moves();
                                break;
                            case "\u2656":
                                Rook new_rook = new Rook(buttonText,piece_color,game,i);
                                legal_moves = new_rook.get_moves();
                                break;
                            case "\u2657":
                                Bishop new_bishop = new Bishop(buttonText,piece_color,game,i);
                                legal_moves = new_bishop.get_moves();
                                break;
                            case "\u2655":
                                King new_king = new King(buttonText,piece_color,game,i);
                                legal_moves = new_king.get_moves();
                                break;
                            case "\u2654":
                                Queen new_queen = new Queen(buttonText,piece_color,game,i);
                                legal_moves = new_queen.get_moves();
                                break;
                            case "\u2658":
                                Knight new_knight = new Knight(buttonText,piece_color,game,i);
                                legal_moves = new_knight.get_moves();
                        }
                        game.set_move_array(legal_moves);
                        chessBoard.remove(placeHolder);
                        placeHolder = changeBoard(i,game.get_select_index(),game.get_chosen_piece(),game.get_previous_piece(),legal_moves,-1);
                        chessBoard.add(placeHolder);
                        chessBoard.revalidate();
                        chessBoard.repaint();
                        }

                }
                else{
                    boolean legal = true;
                    int capture_index = -1;
                    if(!(game.get_move_array().get(0).contains(i)||
                         game.get_move_array().get(1).contains(i))){
                         legal = false;
                         jLabel1.setText("Illegal movement, make an allowed move");
                    }
                    
                    if(legal){
                        if(game.get_move_array().get(1).contains(i)){
                            if(game.get_array_index(i).getText().equals("\u2655")){
                                game.set_winner(true);
                                 if(game.get_player_turn()){
                                    kingLabel.setForeground(Color.RED);
                                    pieceColorReset(1);
                                    kingLabel.setText("King    : DEAD");
                                    kingLabel.setForeground(Color.RED);
                                } else {
                                    kingLabel2.setForeground(Color.RED);
                                    pieceColorReset(2);
                                    kingLabel2.setText("King    : DEAD");
                                    kingLabel2.setForeground(Color.RED);
                                }
                            }
                            capture_index = i;
                            
                            /* determine which piece was captured and decerement the 
                            number of pieces alive */
                            String buttonText = game.array_board[capture_index].getText();

                            switch(buttonText){
                                case "\u2659":
                                    // pawn
                                    // if its player's turn
                                    // decrement computer's pawn by 1
                                    if(turn == 1) {
                                        pawnLabel2.setText("Pawn  :  " + (--p2_game_piece[0]));
                                        pieceColorReset(2);
                                        pawnLabel2.setForeground(Color.RED);
                                    } else {
                                        pawnLabel.setText("Pawn  :  " + (--p1_game_piece[0]));
                                        pieceColorReset(1);
                                        pawnLabel.setForeground(Color.RED);
                                    }
                                    break;
                                case "\u2656":
                                    // rook
                                    if(turn == 1) {
                                        rookLabel2.setText("Rook   :  " + (--p2_game_piece[2]));
                                        pieceColorReset(2);
                                        rookLabel2.setForeground(Color.RED);
                                    } else if(turn == 2) {
                                        rookLabel.setText("Rook   :  " + (--p1_game_piece[2]));
                                        pieceColorReset(1);
                                        rookLabel.setForeground(Color.RED);
                                    }
                                    break;
                                case "\u2657":
                                    // bishop
                                    if(turn == 1) {
                                        bishopLabel2.setText("Bishop :  " + (--p2_game_piece[3]));
                                        pieceColorReset(2);
                                        bishopLabel2.setForeground(Color.RED);
                                    } else if(turn == 2) {
                                        bishopLabel.setText("Bishop :  " + (--p1_game_piece[3]));
                                        pieceColorReset(1);
                                        bishopLabel.setForeground(Color.RED);
                                    }
                                    break;
                                case "\u2654":
                                    // queen
                                   if(turn == 1) {
                                        queenLabel2.setText("Queen :  " + (--p2_game_piece[4]));
                                        pieceColorReset(2);
                                        queenLabel2.setForeground(Color.RED);
                                    } else if(turn == 2) {
                                        queenLabel.setText("Queen :  " + (--p1_game_piece[4]));
                                        pieceColorReset(1);
                                        queenLabel.setForeground(Color.RED);
                                    }
                                    break;
                                case "\u2658":
                                    // knight
                                    if(turn == 1) {
                                        knightLabel2.setText("Knight :  " + (--p2_game_piece[1]));
                                        pieceColorReset(2);
                                        knightLabel2.setForeground(Color.RED);
                                    } else if(turn == 2) {
                                        knightLabel.setText("Knight :  " + (--p1_game_piece[1]));
                                        pieceColorReset(1);
                                        knightLabel.setForeground(Color.RED);
                                    }
                            }
                        }
                        game.set_previous_piece(game.get_array_index(i));
                        chessBoard.remove(placeHolder);
                        legal_moves = new ArrayList();
                        legal_moves.add(new ArrayList());
                        legal_moves.add(new ArrayList());
                        placeHolder = changeBoard(i,game.get_select_index(),game.get_chosen_piece()
                                                 ,game.get_previous_piece(),legal_moves,capture_index);
                        chessBoard.add(placeHolder);
                        chessBoard.revalidate();
                        chessBoard.repaint();
                        game.set_chosen_piece(null);
                        game.set_previous_piece(null);
                        game.set_move_array(null);
                        game.set_turns(game.get_turns()+1);
                        if(game.get_player_turn()==false){
                            turn = 1;
                        } else {
                            turn = 2;
                        }

                        if(legal){
                            jLabel1.setText(turn==1?player1.get_username():player2.get_username()
                                             + " " + turn + " Select a Game Piece");
                        } 
                    }
                }

                revalidate();
                repaint();
                }
            }
            if(game.get_winner()==true){
                if(game.get_player_turn())
                    thread.setWinner(1);   
                else 
                    thread.setWinner(2);
            }
        
            turnsLabel.setText("Turn :     " + (game.get_turns())/2);
            break;
            }
        case 1:
            // Get the action command of the object triggering the action event
            String action = e.getActionCommand();
            Color piece_color;
            ArrayList<ArrayList<Integer>> legal_moves = new ArrayList();
            legal_moves.add(new ArrayList());
            legal_moves.add(new ArrayList());
        
        // Run through the array looking for the button that was clicked
        for(int i=0;i<64;i++){
            if(Integer.toString(i).equals(action)){
            int turn;
            if(game.get_player_turn()==false){
                turn = 1;
            }
            else{
                turn = 2;
            }
            jLabel1.setText(player1.get_username() + " Select a Game Piece");
            jLabel6.setText("Player ID: " + player1.get_id());
            
            if(turn == 1){
            jLabel1.setText("Player " + turn + " Select a Square to Move to");
            if(game.get_chosen_piece()==null){
                boolean found = true;
                JButton chosen = game.get_array_index(i);
                    
                if(turn==1){
                    piece_color = Color.WHITE;
                    if(chosen.getForeground()!=Color.WHITE){
                        jLabel1.setText("Illegal Selection, Player 1 select a white piece");
                        found = false;
                    } 
                }
                else{
                    piece_color = Color.BLACK;
                    if(chosen.getForeground()!=Color.BLACK){
                        jLabel1.setText("Illegal Selection, Player 2 must select a black piece");
                        found = false;
                    } 
                }
                    
                if(found==true){
                    game.set_chosen_piece(chosen);
                    game.set_select_index(i); 
                    Object o = e.getSource();
                    JButton b = null;
                    String buttonText = "";

                    if(o instanceof JButton)
                        b = (JButton)o;

                    if(b != null)
                        buttonText = b.getText();

                    switch(buttonText){
                        case "\u2659":
                            Pawn new_pawn = new Pawn(buttonText,piece_color,game,i);
                            legal_moves = new_pawn.get_moves();
                            break;
                        case "\u2656":
                            Rook new_rook = new Rook(buttonText,piece_color,game,i);
                            legal_moves = new_rook.get_moves();
                            break;
                        case "\u2657":
                            Bishop new_bishop = new Bishop(buttonText,piece_color,game,i);
                            legal_moves = new_bishop.get_moves();
                            break;
                        case "\u2655":
                            King new_king = new King(buttonText,piece_color,game,i);
                            legal_moves = new_king.get_moves();
                            break;
                        case "\u2654":
                            Queen new_queen = new Queen(buttonText,piece_color,game,i);
                            legal_moves = new_queen.get_moves();
                            break;
                        case "\u2658":
                            Knight new_knight = new Knight(buttonText,piece_color,game,i);
                            legal_moves = new_knight.get_moves();
                    }
                    game.set_move_array(legal_moves);
                    chessBoard.remove(placeHolder);
                    placeHolder = changeBoard(i,game.get_select_index(),game.get_chosen_piece(),game.get_previous_piece(),legal_moves,-1);
                    chessBoard.add(placeHolder);
                    chessBoard.revalidate();
                    chessBoard.repaint();
                    }
            
            }
            else{
                boolean legal = true;
                int capture_index = -1;
                if(!(game.get_move_array().get(0).contains(i)||
                     game.get_move_array().get(1).contains(i))){
                     legal = false;
                     jLabel1.setText("Illegal movement, make an allowed move");
                }
                if(legal){
                    if(game.get_move_array().get(1).contains(i)){
                        if(game.get_array_index(i).getText().equals("\u2655")){
                            game.set_winner(true);
                        }
                        capture_index = i;
                    }
                    game.set_previous_piece(game.get_array_index(i));
                    chessBoard.remove(placeHolder);
                    legal_moves = new ArrayList();
                    legal_moves.add(new ArrayList());
                    legal_moves.add(new ArrayList());
                    placeHolder = changeBoard(i,game.get_select_index(),game.get_chosen_piece()
                                             ,game.get_previous_piece(),legal_moves,capture_index);
                    chessBoard.add(placeHolder);
                    chessBoard.revalidate();
                    chessBoard.repaint();
                    game.set_chosen_piece(null);
                    game.set_previous_piece(null);
                    game.set_move_array(null);
                    game.set_turns(game.get_turns()+1);
                    
                    if(game.get_player_turn()){
                        turn = 1;
                    }
                    else{
                        turn = 2;
                    }
                    if(legal){
                        jLabel1.setText("Player " + turn + " Select a Game Piece");
                        jLabel6.setText("Player ID: " + player2.get_id());
                    } 
                }
                Game_Tree gametree = new Game_Tree(game,0,0,0,0);
                    int []pair = gametree.evaluate(gametree.root);
                    game.set_select_index(pair[0]);
                    game.set_move_index(pair[1]);
                    game.set_previous_piece(game.get_array_index(pair[1]));
                    game.set_chosen_piece(game.get_array_index(pair[0]));
                capture_index = -1;
                if(!game.array_board[game.get_move_index()].getText().equals("")){
                    capture_index = game.get_move_index();
                    if(game.get_array_index(capture_index).getText().equals("\u2655")){
                        game.set_winner(true);
                        if(game.get_player_turn()){
                            kingLabel.setForeground(Color.RED);
                            pieceColorReset(1);
                            kingLabel.setText("King    : DEAD");
                            kingLabel.setForeground(Color.RED);
                        } else {
                            kingLabel2.setForeground(Color.RED);
                            pieceColorReset(2);
                            kingLabel2.setText("King    : DEAD");
                            kingLabel2.setForeground(Color.RED);
                        }
                        
                    }
//                    /* determine which piece was captured and decerement the 
//                    number of pieces alive */
//                    String buttonText = game.array_board[capture_index].getText();

//                    switch(buttonText){
//                        case "\u2659":
//                            // pawn
//                            // if its player's turn
//                            // decrement computer's pawn by 1
//                            
//                            if(turn == 2) {
//                                System.out.println("AI");
//                                pawnLabel2.setText("Pawn   :  " + (--p2_game_piece[0]));
//                                pieceColorReset(2);
//                                pawnLabel2.setForeground(Color.RED);
//                            } 
//                            else if(turn == 1) {
//                                System.out.println("HUMAN");
//                                pawnLabel.setText("Pawn   :  " + (--p1_game_piece[0]));
//                                pieceColorReset(1);
//                                pawnLabel.setForeground(Color.RED);
//                            }
//                            break;
//                        case "\u2656":
//                            // rook
//                            if(turn == 2) {
//                                rookLabel2.setText("Rook   :  " + (--p2_game_piece[2]));
//                                pieceColorReset(2);
//                                rookLabel2.setForeground(Color.RED);
//                            } else if(turn == 1) {
//                                rookLabel.setText("Rook   :  " + (--p1_game_piece[2]));
//                                pieceColorReset(1);
//                                rookLabel.setForeground(Color.RED);
//                            }
//                            break;
//                        case "\u2657":
//                            // bishop
//                            if(turn == 2) {
//                                bishopLabel2.setText("Bishop :  " + (--p2_game_piece[3]));
//                                pieceColorReset(2);
//                                bishopLabel2.setForeground(Color.RED);
//                            } else if(turn == 1) {
//                                bishopLabel.setText("Bishop :  " + (--p1_game_piece[3]));
//                                pieceColorReset(1);
//                                bishopLabel.setForeground(Color.RED);
//                            }
//                            break;
//                        case "\u2654":
//                            // queen
//                           if(turn == 2) {
//                                queenLabel2.setText("Queen :  " + (--p2_game_piece[4]));
//                                pieceColorReset(2);
//                                queenLabel2.setForeground(Color.RED);
//                            } else if(turn == 1) {
//                                queenLabel.setText("Queen :  " + (--p1_game_piece[4]));
//                                pieceColorReset(1);
//                                queenLabel.setForeground(Color.RED);
//                            }
//                            break;
//                        case "\u2658":
//                            // knight
//                            if(turn == 2) {
//                                knightLabel2.setText("Knight :  " + (--p2_game_piece[1]));
//                                pieceColorReset(2);
//                                knightLabel2.setForeground(Color.RED);
//                            } else if(turn == 1) {
//                                knightLabel.setText("Knight :  " + (--p1_game_piece[1]));
//                                pieceColorReset(1);
//                                knightLabel.setForeground(Color.RED);
//                            }
//                    }
                }
                
                legal_moves = new ArrayList();
                legal_moves.add(new ArrayList());
                legal_moves.add(new ArrayList());
                chessBoard.remove(placeHolder);
                placeHolder = changeBoard(game.get_move_index(),game.get_select_index(), game.get_chosen_piece(), 
                            game.get_previous_piece(),legal_moves,capture_index);
                chessBoard.add(placeHolder);
                chessBoard.revalidate();
                chessBoard.repaint();
                game.set_chosen_piece(null);
                game.set_previous_piece(null);
                game.set_move_array(null);
                
//                if(legal){
//                    jLabel1.setText(player2.get_username() + " Select a Game Piece");
//                    jLabel6.setText("Player ID: " + player2.get_id());
//                    // jLabel8.setText(" Your  " + turn + " Turn ");
//                } 
                
                if(!game.get_winner())
                    game.set_turns(game.get_turns()+1);
                
            }
            
            revalidate();
            repaint();
            }
            else{
               
                
            }
        }
        }
        if(game.get_winner()==true){
            // Send Win or Loss to Database
         /*
            try{
            
            //String mysqlQuery = "INSERT INTO results(wins,losses)" + "values(1,0) + FROM users, results, useres_xref " + 
            //         "WHERE user_id = useres_xref.user_id" + "AND results.id = useres_xref.results_id";
            
           // states = connect.prepareStatement(mysqlQuery);
           // states.setString(1,player1.get_username());
           //  states.setString(2,player1.get_password());
           //states.setInt(3,player1.get_id());
           // int i = states.executeUpdate();
            
            
           // if(i>0){
          //  JOptionPane.showMessageDialog(null, " Database updated successfully");
            
            
            } else{
                JOptionPane.showMessageDialog(null, "Oops! There was a problem with the Registration");
            }
            
        }catch(SQLException | HeadlessException Ex){
            
            JOptionPane.showMessageDialog(null, e);
        }
           */ 
            if(game.get_player_turn())
                thread.setWinner(1);   
            else 
                thread.setWinner(2);
        }
        
        turnsLabel.setText("Turn :     " + (game.get_turns())/2);
                
        }
      
    } 
    
    public void setLabelText(String label) {
        jLabel1.setText(label);
    }
    
    /***************************************************************************
     * change text foreground of number of pieces left 
     * back to its original color, which is black
     **************************************************************************/
    public void pieceColorReset(int player) {
        switch(player) {
            case 1: 
                pawnLabel.setForeground(Color.WHITE);
                knightLabel.setForeground(Color.WHITE);
                rookLabel.setForeground(Color.WHITE);
                bishopLabel.setForeground(Color.WHITE);
                queenLabel.setForeground(Color.WHITE);
                kingLabel.setForeground(Color.WHITE);
                break;
            case 2:
                pawnLabel2.setForeground(Color.WHITE);
                knightLabel2.setForeground(Color.WHITE);
                rookLabel2.setForeground(Color.WHITE);
                bishopLabel2.setForeground(Color.WHITE);
                queenLabel2.setForeground(Color.WHITE);
                kingLabel2.setForeground(Color.WHITE);
        }
        
       if(p1_game_piece[0] == 0)
           pawnLabel.setForeground(Color.GRAY);
       if(p1_game_piece[1] == 0)
           knightLabel.setForeground(Color.GRAY);
       if(p1_game_piece[2] == 0)
                rookLabel.setForeground(Color.GRAY);
       if(p1_game_piece[3] == 0)
                bishopLabel.setForeground(Color.GRAY);
       if(p1_game_piece[4] == 0)
                queenLabel.setForeground(Color.GRAY);
       
       if(p2_game_piece[0] == 0)
           pawnLabel2.setForeground(Color.GRAY);
       if(p2_game_piece[1] == 0)
           knightLabel2.setForeground(Color.GRAY);
       if(p2_game_piece[2] == 0)
                rookLabel2.setForeground(Color.GRAY);
       if(p2_game_piece[3] == 0)
                bishopLabel2.setForeground(Color.GRAY);
       if(p2_game_piece[4] == 0)
                queenLabel2.setForeground(Color.GRAY);
       
    }
    
    public JPanel makeBoard(){
    /***************************************************************************
    * This function creates a chess board out of a JPanel of JPanels in
    * GridLayout. The board is created and filled with game pieces, then is
    * returned to the constructor calling this function.
    **************************************************************************/
    
        final int ROWS = 8,COLS = 8,SIZE = 64; // Size of the rows,collumns,board
        JPanel pane = new JPanel(new GridLayout(ROWS,COLS,2,2)); // Create the grid
        JPanel[] square = new JPanel[SIZE]; // Create the board

        // Create brown and tan colors for the grid squares
        Color color1 = new Color(109,53,26), // Tan
        color2 = new Color(240,220,130), // Brown
        tempColor; // Temporary Color for swaping procedure

        // Run through th board and add the grid squares to the board one by one
        for(int i=0;i<SIZE;i++){
            square[i] = new JPanel(); // Create a new square and
            pane.add(square[i],SwingConstants.CENTER); // add it too the game board
            square[i].setLayout(new FlowLayout()); // Set layout to BorderLayout
            //square[i].add(getBlank(i)); // Add a clear button to the square
            game.array_board[i] = getBlank(i);
        
            // Assign a color to the square (alternating chess pattern)
            if(i%2==0){
                square[i].setBackground(color1);}
            else{
                square[i].setBackground(color2);}
            // Swap the colors each time the end of the row is reached
            if(i%8==7){
                tempColor = color1;
                color1 = color2;
                color2 = tempColor;
            }
            // Add the square
            if(i<16||i>47){
                square[i].add(getPiece(i));
                game.array_board[i] = getPiece(i);
            }

            Border line_border = BorderFactory.createLineBorder(Color.BLACK,2);
            square[i].setBorder(line_border);
            square[i].setForeground(Color.BLACK);
        }

    return pane;
    }
    public JPanel changeBoard(int move_index,int select_index,JButton new_piece,
                              JButton previous_piece,ArrayList<ArrayList<Integer>> 
                              legal_moves,int capture_index){
    /***************************************************************************
    * This function creates a chess board out of a JPanel of JPanels in
    * GridLayout. The board is created and filled with game pieces, then is
    * returned to the constructor calling this function.
    **************************************************************************/
        
        final int ROWS = 8,COLS = 8,SIZE = 64; // Size of the rows,collumns,board
        JPanel pane = new JPanel(new GridLayout(ROWS,COLS,2,2)); // Create the grid
        JPanel[] square = new JPanel[SIZE]; // Create the board
    
        // Create brown and tan colors for the grid squares
        Color color1 = new Color(109,53,26), // Tan
        color2 = new Color(240,220,130), // Brown
        tempColor; // Temporary Color for swaping procedure
        
        // Run through th board and add the grid squares to the board one by one
        for(int i=0;i<SIZE;i++){
            
            square[i] = new JPanel(); // Create a new square and
            pane.add(square[i],SwingConstants.CENTER); // add it too the game board
            square[i].setLayout(new FlowLayout()); // Set layout to BorderLayout
            //square[i].add(getBlank(i)); // Add a clear button to the square    
            
            // Assign a color to the square (alternating chess pattern)
            if(i%2==0){
                square[i].setBackground(color1);}
                else{
                    square[i].setBackground(color2);}
                    // Swap the colors each time the end of the row is reached
                    if(i%8==7){
                        tempColor = color1;
                        color1 = color2;
                        color2 = tempColor;
                    }
            if(i==capture_index){
                new_piece.setActionCommand(Integer.toString(i));
                square[i].add(new_piece);
                game.array_board[i] = new_piece;
                
                if(select_index<i){
                    square[select_index].remove(previous_piece); 
                    previous_piece = getBlank(select_index);
                    square[select_index].add(previous_piece);
                }
                else{
                    square[select_index] = new JPanel();
                    pane.add(square[i],SwingConstants.CENTER);
                    square[i].setLayout(new BorderLayout());
                    previous_piece = getBlank(select_index);
                    square[select_index].add(previous_piece);    
                }
                
                game.array_board[select_index] = previous_piece;
            }
            else if(i==move_index){
                new_piece.setActionCommand(Integer.toString(i));
                square[i].add(new_piece);
                game.array_board[i] = new_piece;
            }    
            else{
                if(i==select_index){
                    previous_piece.setActionCommand(Integer.toString(i));
                    square[i].add(previous_piece);
                    game.array_board[i] = previous_piece;
                }
                JButton temp_piece = game.get_array_index(i);
                temp_piece.setActionCommand(Integer.toString(i));
                square[i].add(temp_piece);          
            }
            
            Border line_border = BorderFactory.createLineBorder(Color.BLACK,2);
            square[i].setBorder(line_border);
            square[i].setForeground(Color.BLACK);
            
            // available moves
            if(legal_moves.get(0).contains(i)){
                //Border line_border = BorderFactory.createLineBorder(Color.YELLOW,2);
               // square[i].setBorder(line_border);
                square[i].setBackground(new Color(209, 190, 1));
                //square[i].setForeground(Color.YELLOW);
            } 
            
            // available moves + kill
            if(legal_moves.get(1).contains(i)){
               // Border line_border = BorderFactory.createLineBorder(Color.RED,2);
                //square[i].setBorder(line_border);
                //square[i].setForeground(Color.RED);
                 square[i].setBackground(new Color(150,0,0));
            }
        }
        
    return pane;
    
    }
    public JButton getPiece(int index){
    /***************************************************************************
    * This method returns a properly formated JLabel which will work as a chess
    * piece. The method determines the proper color and type of game piece. The
    * method is called from the makeBoard method.
    **************************************************************************/

        // Declare array of unicode pieces and a JLabel to hold one
        String pieces[] = {"\u2654", "\u2655", "\u2656", "\u2657", "\u2658", "\u2659"};
        JButton piece = new JButton(); // JLabel to hold chess piece
        piece.setContentAreaFilled(false); // Make the button clear
        piece.addActionListener(this); 
        piece.revalidate();
        piece.setActionCommand(Integer.toString(index));

        // Determine the type of chess piece
        if(index==0||index==7||index==56||index==63){
        piece.setText(pieces[2]); // Castle
        }
        else if(index==1||index==6||index==57||index==62){
        piece.setText(pieces[4]); // Horse
        }
        else if(index==2||index==5||index==58||index==61){
        piece.setText(pieces[3]); // Bishop
        }
        else if(index==3||index==59){
        piece.setText(pieces[1]); // King
        }
        else if(index==4||index==60){
        piece.setText(pieces[0]); // Queen
        }
        else {
        piece.setText(pieces[5]); // Pawn
        }

        // Determine the color of the game piece
        if(index<32){
            piece.setForeground(Color.WHITE);}
        else{
            piece.setForeground(Color.BLACK);}

    return piece;
    }
    public JButton getBlank(int index){
    /***************************************************************************
    * This function creates and returns a clear JButton to be assigned to a
    * grid square of the game board.
    **************************************************************************/

        // Create a new JButton
        JButton blank = new JButton();
        blank.setContentAreaFilled(false); // Make the button clear
        blank.setBorder( BorderFactory.createEmptyBorder(10, 20, 10, 10));
        //blank.setBorder( BorderFactory.createEmptyBorder(20, 50, 10, 10));
        blank.addActionListener(this);
        blank.revalidate();
        blank.setActionCommand(Integer.toString(index));
        
        return blank;        
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem LoadMenu;
    private javax.swing.JLabel bishopLabel;
    private javax.swing.JLabel bishopLabel2;
    private javax.swing.JPanel chessBoard;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel kingLabel;
    private javax.swing.JLabel kingLabel2;
    private javax.swing.JLabel knightLabel;
    private javax.swing.JLabel knightLabel2;
    private javax.swing.JMenuItem newGameMenu;
    private javax.swing.JLabel pawnLabel;
    private javax.swing.JLabel pawnLabel2;
    private javax.swing.JLabel queenLabel;
    private javax.swing.JLabel queenLabel2;
    private javax.swing.JLabel rookLabel;
    private javax.swing.JLabel rookLabel2;
    private javax.swing.JMenuItem saveAsMenu;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JLabel turnsLabel;
    // End of variables declaration//GEN-END:variables
}
